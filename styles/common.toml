#

# pre-commit
[[".pre-commit-config.yaml".repos]]  # dycw
repo = "https://github.com/dycw/pre-commit-hooks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "run-bump-my-version"

[[".pre-commit-config.yaml".repos]]  # nitpick
repo = "https://github.com/andreoliwa/nitpick"

[[".pre-commit-config.yaml".repos.hooks]]
id = "nitpick-check"

[[".pre-commit-config.yaml".repos]]  # pre-commit
repo = "https://github.com/pre-commit/pre-commit-hooks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-executables-have-shebangs"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-merge-conflict"

[[".pre-commit-config.yaml".repos.hooks]]
id = "check-symlinks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "destroyed-symlinks"

[[".pre-commit-config.yaml".repos.hooks]]
id = "detect-private-key"

[[".pre-commit-config.yaml".repos.hooks]]
id = "end-of-file-fixer"

[[".pre-commit-config.yaml".repos.hooks]]
args = ["--fix=lf"]
id = "mixed-line-ending"

[[".pre-commit-config.yaml".repos.hooks]]
id = "no-commit-to-branch"

[[".pre-commit-config.yaml".repos.hooks]]
id = "trailing-whitespace"

[[".pre-commit-config.yaml".repos]]  # pretty-format-toml
repo = "https://github.com/macisamuele/language-formatters-pre-commit-hooks"

[[".pre-commit-config.yaml".repos.hooks]]
args = ["--autofix", "--trailing-commas"]
id = "pretty-format-toml"

[[".pre-commit-config.yaml".repos]]  # ruff
repo = "https://github.com/astral-sh/ruff-pre-commit"

[[".pre-commit-config.yaml".repos.hooks]]
args = ["--fix"]
id = "ruff-check"

[[".pre-commit-config.yaml".repos]]  # shellcheck
repo = "https://github.com/shellcheck-py/shellcheck-py"

[[".pre-commit-config.yaml".repos.hooks]]
id = "shellcheck"

# nitpick
[nitpick.files.absent]
".bump2version.cfg" = ""
".flake8" = ""
".isort.cfg" = ""
"MANIFEST.in" = ""
"package.json" = ""
"setup.cfg" = ""
"setup.py" = ""

[nitpick.files.present]
"pyproject.toml" = ""

# build-system
["pyproject.toml".build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# project
["pyproject.toml".project]
readme = "README.md"

# bump-my-version
["pyproject.toml".tool.bumpversion]
allow_dirty = true

# coverage
["pyproject.toml".tool.coverage]

["pyproject.toml".tool.coverage.html]
directory = ".coverage/html"

["pyproject.toml".tool.coverage.report]
exclude_also = ["@overload", "if TYPE_CHECKING:"]
fail_under = 100.0
skip_covered = true
skip_empty = true

["pyproject.toml".tool.coverage.run]
branch = true
data_file = ".coverage/data"
parallel = true

# hatch
["pyproject.toml".tool.hatch]

["pyproject.toml".tool.hatch.build.targets.sdist]
include = ["src"]

# pyright
["pyproject.toml".tool.pyright]
deprecateTypingAliases = true
enableReachabilityAnalysis = false
reportAny = false
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportImplicitStringConcatenation = true
reportImportCycles = true
reportMissingSuperCall = true
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateUsage = false
reportPropertyTypeMismatch = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true
reportUnusedImport = false
reportUnusedVariable = false
typeCheckingMode = "strict"

# pytest
["pyproject.toml".tool.pytest]

["pyproject.toml".tool.pytest.ini_options]
addopts = [
  "-ra",
  "-vv",
  "--color=auto",
  "--strict-markers",
]
filterwarnings = ["error"]
minversion = "8.0"
testpaths = ["src/tests"]
xfail_strict = true

# ruff
["pyproject.toml".tool.ruff]
src = ["src"]
unsafe-fixes = true

["pyproject.toml".tool.ruff.format]
preview = true
skip-magic-trailing-comma = true

["pyproject.toml".tool.ruff.lint]
fixable = ["ALL"]
ignore = [
  "ANN401",  # any-type
  "ASYNC109",  # async-function-with-timeout
  "C901",  # complex-structure
  "D100",  # undocumented-public-module
  "D101",  # undocumented-public-class
  "D102",  # undocumented-public-method
  "D103",  # undocumented-public-function
  "D104",  # undocumented-public-package
  "D105",  # undocumented-magic-method
  "D106",  # undocumented-public-nested-class
  "D107",  # undocumented-public-init
  "D203",  # one-blank-line-before-class
  "D213",  # multi-line-summary-second-line
  "E501",  # line-too-long
  "PD",  # pandas-vet
  "PERF203",  # try-except-in-loop
  "PLR0911",  # too-many-return-statements
  "PLR0912",  # too-many-branches
  "PLR0913",  # too-many-arguments
  "PLR0915",  # too-many-statements
  "PLR2004",  # magic-value-comparison
  "PT013",  # pytest-incorrect-pytest-import
  "S311",  # suspicious-non-cryptographic-random-usage
  "S603",  # subprocess-without-shell-equals-true
  "S607",  # start-process-with-partial-path
  # preview
  "S101",  # assert
  # formatter
  "W191",  # tab-indentation
  "E111",  # indentation-with-invalid-multiple
  "E114",  # indentation-with-invalid-multiple-comment
  "E117",  # over-indented
  "D206",  # indent-with-spaces
  "D300",  # triple-single-quotes
  "Q000",  # bad-quotes-inline-string
  "Q001",  # bad-quotes-multiline-string
  "Q002",  # bad-quotes-docstring
  "Q003",  # avoidable-escaped-quote
  "COM812",  # missing-trailing-comma
  "COM819",  # prohibited-trailing-comma
  "ISC001",  # single-line-implicit-string-concatenation
  "ISC002",  # multi-line-implicit-string-concatenation
]
select = ["ALL"]

["pyproject.toml".tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = ["S101"]  # assert

["pyproject.toml".tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

["pyproject.toml".tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false
